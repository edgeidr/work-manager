// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

enum Scope {
	ANY
	OWN
}

enum OtpType {
	FORGOT_PASSWORD
}

model User {
	id Int @id @default(autoincrement())
	email String @unique
	password String
	firstName String
	lastName String
	isActive Boolean @default(true)
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt

	sessions Session[]
	userRoles UserRole[]
	userActions UserAction[]
	otps Otp[]
	passwordResetTokens PasswordResetToken[]

	@@map("users")
}

model Role {
	id Int @id @default(autoincrement())
	name String @unique
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt

	userRoles UserRole[]
	roleActions RoleAction[]

	@@map("roles")
}

model Action {
	id Int @id @default(autoincrement())
	name String @unique
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt

	roleActions RoleAction[]
	userActions UserAction[]

	@@map("actions")
}

model RoleAction {
	roleId Int
	actionId Int

	role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
	action Action @relation(fields: [actionId], references: [id], onDelete: Cascade)

	@@id([roleId, actionId])
	@@map("role_actions")
}

model UserRole {
	userId Int
	roleId Int

	user User @relation(fields: [userId], references: [id], onDelete: Cascade)
	role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

	@@id([userId, roleId])
	@@map("user_roles")
}

model UserAction {
	userId Int
	actionId Int
	scope Scope

	user User @relation(fields: [userId], references: [id], onDelete: Cascade)
	action Action @relation(fields: [actionId], references: [id], onDelete: Cascade)

	@@id([userId, actionId])
	@@map("user_actions")
}

model AccessToken {
	id Int @id @default(autoincrement())
	sessionId Int @unique
	value String @unique
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	expiresAt DateTime

	session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

	@@map("access_tokens")
}

model RefreshToken {
	id Int @id @default(autoincrement())
	sessionId Int @unique
	value String @unique
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	expiresAt DateTime

	session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

	@@map("refresh_tokens")
}

model Session {
	id Int @id @default(autoincrement())
	userId Int
	deviceId String @unique
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	
	user User @relation(fields: [userId], references: [id], onDelete: Cascade)
	accessToken AccessToken?
	refreshToken RefreshToken?

	@@unique([userId, deviceId])
	@@map("sessions")
}

model Otp {
	id Int @id @default(autoincrement())
	code String
	type OtpType
	userId Int
	used Boolean @default(false)
	attempts Int @default(0)
	expiresAt DateTime
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	
	user User @relation(fields: [userId], references: [id], onDelete: Cascade)

	@@map("otps")
}

model PasswordResetToken {
	id Int @id @default(autoincrement())
	userId Int
	value String @unique
	used Boolean @default(false)
	expiresAt DateTime
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt

	user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}